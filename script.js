document.addEventListener('DOMContentLoaded', () => {
    const taskInput = document.getElementById('taskInput');
    const dateInput = document.getElementById('taskDate');
    const taskPriority = document.getElementById('taskPriority');
    const addBtn = document.getElementById('addBtn');
    const tasksContainer = document.getElementById('tasksContainer');
    const filterStatus = document.getElementById('filterStatus');
    const filterPriority = document.getElementById('filterPriority');
    const filterDate = document.getElementById('filterDate');
    const filterBtn = document.getElementById('filterBtn');
    const resetBtn = document.getElementById('resetBtn');
    const progressBar = document.getElementById('progressBar');
    const progressText = document.getElementById('progressText');
    const taskCount = document.getElementById('taskCount');
    
    let tasks = JSON.parse(localStorage.getItem('tasks')) || [];

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ localStorage
    renderAllTasks();
    updateProgress();

    // –ü—Ä–∏ —Ñ–æ–∫—É—Å–µ –º–µ–Ω—è–µ–º –Ω–∞ type="date" –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    dateInput.addEventListener('focus', () => {
        dateInput.type = 'date';
    });

    // –ü—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞, –µ—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç
    dateInput.addEventListener('blur', function() {
        if (!this.value) {
            dateInput.type = 'text';
            dateInput.placeholder = '–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è';
        }
    });

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    addBtn.addEventListener('click', () => {
        const title = taskInput.value.trim();
        const date = dateInput.value;
        const priority = taskPriority.value;

        if (title) {
            const task = {
                id: Date.now(),
                title,
                date,
                priority,
                completed: false
            };
            tasks.push(task);
            saveTasks();
            renderTask(task, true); // true - –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞, –¥–æ–±–∞–≤–∏–º –∞–Ω–∏–º–∞—Ü–∏—é
            taskInput.value = '';
            dateInput.value = '';
            dateInput.type = 'text';
            dateInput.placeholder = '–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è';
            updateProgress();
        }
    });

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á
    filterBtn.addEventListener('click', applyFilters);
    
    // –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
    resetBtn.addEventListener('click', () => {
        filterStatus.value = 'all';
        filterPriority.value = 'all';
        filterDate.value = '';
        renderAllTasks();
        updateProgress();
    });

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    function applyFilters() {
        const statusFilter = filterStatus.value;
        const priorityFilter = filterPriority.value;
        const dateFilter = filterDate.value;
        
        let filteredTasks = tasks;
        
        // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if (statusFilter !== 'all') {
            filteredTasks = filteredTasks.filter(task => 
                statusFilter === 'completed' ? task.completed : !task.completed
            );
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        if (priorityFilter !== 'all') {
            filteredTasks = filteredTasks.filter(task => 
                task.priority === priorityFilter
            );
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
        if (dateFilter) {
            filteredTasks = filteredTasks.filter(task => 
                task.date === dateFilter
            );
        }
        
        // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        tasksContainer.innerHTML = '';
        filteredTasks.forEach(task => renderTask(task));
        updateProgress(filteredTasks);
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á
    function renderAllTasks() {
        tasksContainer.innerHTML = '';
        tasks.forEach(task => renderTask(task));
        updateProgress();
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    function renderTask(task, isNew = false) {
        const taskEl = document.createElement('div');
        taskEl.className = `task ${task.completed ? 'completed' : ''} ${isNew ? 'adding' : ''}`;
        taskEl.dataset.id = task.id;
        
        taskEl.innerHTML = `
            <div class="task-header">
                <input type="checkbox" class="status-checkbox" ${task.completed ? 'checked' : ''}>
                <h3 class="task-title">${task.title}</h3>
            </div>
            <p>–°—Ä–æ–∫: ${task.date || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
            <p>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${task.priority}</p>
            <p>–°—Ç–∞—Ç—É—Å: ${task.completed ? '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ' : 'üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ'}</p>
            <div class="task-actions">
                <button class="edit-btn">–ò–∑–º–µ–Ω–∏—Ç—å</button>
                <button class="delete-btn">–£–¥–∞–ª–∏—Ç—å</button>
            </div>
        `;
        
        // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–º–µ–Ω—è–µ–º –µ–µ
        const existingTask = document.querySelector(`.task[data-id="${task.id}"]`);
        if (existingTask) {
            existingTask.classList.add('updating');
            setTimeout(() => {
                existingTask.replaceWith(taskEl);
                setupTaskEventListeners(taskEl, task);
            }, 300);
        } else {
            tasksContainer.appendChild(taskEl);
            setupTaskEventListeners(taskEl, task);
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∑–∞–¥–∞—á–∏
    function setupTaskEventListeners(taskEl, task) {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —á–µ–∫–±–æ–∫—Å–∞ —Å—Ç–∞—Ç—É—Å–∞
        taskEl.querySelector('.status-checkbox').addEventListener('change', (e) => {
            task.completed = e.target.checked;
            saveTasks();
            taskEl.classList.add('updating');
            setTimeout(() => {
                renderTask(task);
                updateProgress();
            }, 300);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        taskEl.querySelector('.delete-btn').addEventListener('click', () => {
            taskEl.classList.add('deleting');
            setTimeout(() => {
                tasks = tasks.filter(t => t.id !== task.id);
                saveTasks();
                taskEl.remove();
                updateProgress();
            }, 500);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        taskEl.querySelector('.edit-btn').addEventListener('click', () => {
            editTask(task, taskEl);
        });
    }

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    function editTask(task, taskEl) {
        const editForm = document.createElement('div');
        editForm.className = 'edit-form';
        editForm.innerHTML = `
            <input type="text" value="${task.title}" class="edit-title">
            <input type="date" value="${task.date}" class="edit-date">
            <select class="edit-priority">
                <option value="–ù–∏–∑–∫–∏–π" ${task.priority === '–ù–∏–∑–∫–∏–π' ? 'selected' : ''}>–ù–∏–∑–∫–∏–π</option>
                <option value="–°—Ä–µ–¥–Ω–∏–π" ${task.priority === '–°—Ä–µ–¥–Ω–∏–π' ? 'selected' : ''}>–°—Ä–µ–¥–Ω–∏–π</option>
                <option value="–í—ã—Å–æ–∫–∏–π" ${task.priority === '–í—ã—Å–æ–∫–∏–π' ? 'selected' : ''}>–í—ã—Å–æ–∫–∏–π</option>
            </select>
            <button class="save-btn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
        `;
        taskEl.innerHTML = '';
        taskEl.appendChild(editForm);

        editForm.querySelector('.save-btn').addEventListener('click', () => {
            const newTitle = editForm.querySelector('.edit-title').value.trim();
            const newDate = editForm.querySelector('.edit-date').value;
            const newPriority = editForm.querySelector('.edit-priority').value;

            if (newTitle) {
                task.title = newTitle;
                task.date = newDate;
                task.priority = newPriority;
                saveTasks();
                taskEl.classList.add('updating');
                setTimeout(() => {
                    renderTask(task);
                    updateProgress();
                }, 300);
            }
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    function updateProgress(currentTasks = tasks) {
        if (currentTasks.length === 0) {
            progressBar.style.width = '0%';
            progressText.textContent = '0% –∑–∞–≤–µ—Ä—à–µ–Ω–æ (0/0)';
            taskCount.textContent = '–í—Å–µ–≥–æ –∑–∞–¥–∞—á: 0';
            return;
        }
        
        const completedCount = currentTasks.filter(task => task.completed).length;
        const progress = Math.round((completedCount / currentTasks.length) * 100);
        
        progressBar.style.width = `${progress}%`;
        progressText.textContent = `${progress}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ (${completedCount}/${currentTasks.length})`;
        taskCount.textContent = `–í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${tasks.length}`;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ localStorage
    function saveTasks() {
        localStorage.setItem('tasks', JSON.stringify(tasks));
    }
});